Starter-?
	to install django in pipenv: pipenv install django 😎️
	to show lists of sub-commands : $ django-admin 🤔️
	to create new django project : $ django-admin startproject <project-name> 😀️
	to run the django server:
		?if not yet inside the created project folder:
			cd <project-name>
		?else:
			$ python manage.py runserver # localhost:8000/
	to start new app: ☺️
		->inside the project folder:
		$ Python manage.py startproject <appName>✔️
	to check pipenv path:
		*when inside pipenv shell
		$ pipenv --where
	to ckeck virtual environment path : 🤩️
		*when inside pipenv shell	
		$ pipenv --venv 

Tips-?

URLS: 🎯️
	->go to 'project/urls.py':

		from django.urls import include  # url pattern from apps exp:'app.urls'

		urlpatterns = [
		    # localhost:8000/admin/
	    	    path('admin/', admin.site.urls),
		    # localhost:8000/app/
		    path('app/', include('app.urls')),  # file in app
			]

	->go to app create urls.py & inside 'app/urls.py' input this:
		from django.urls import path  # to use django urls
		from . import views  # to import views.py

		urlpatterns = [
		    path('', views.home_page, name='app-home_page'),
		    path('about/', views.about_page, name='app-about_page'),
		]

ADMIN: 👮‍♂️️
	->to create superuser
		$ python manage.py createsuperuser
	->go admin page:
		localhost:8000/admin/
	-> to register an app to the admin:
		app/admin.py:
			from django.contrib import admin
			from .models import Post
			
			admin.site.register(Post)
 
VIEWS: 🎞️
	->go to app/views.py:
	?if to test using HttpResponse:
		from django.http import HttpResponse # import at the top
		
		def home_page(request):  # create a method to initialize
			return HttpResponse('<h1>Hello World</h1>')✔️
	?else if to render a template:
		from django.shortcuts import render # import a the top
		
		def home_page(request):
			return render(request, 'app/home.html')✔️ # app/templates/app/home.html
 
			*want to pass a variable? 🤔️
			food_variable = 'burger'; # declare variable
			drink_variable = 'water'; # declare variable
			context = {
				'food' = food_variable,
				'drink' = drink_variable
				}
			return render(request, 'app/home.html', context)✔️ # app/templates/app/home.html

TEMPLATES: 🏗️
	->first create new directory name it 'templates' in you're app
	->inside 'app/templates' make another directory with similar name as you're app
	-> sample path 'app/templates/app/ inside you can create '.html' files
	-> 'app/templates/app/home.html' will be called by 'app/views.py' as 'app/home.html'

MIGRATIONS:
	to check any changes inside the migration:
		*does not perform migration does not run or apply any changes
		$ python manage.py makemigrations 
	to apply migration
		*will apply any changes:
		$ python manage.py migrate
	to check the sql query of the migration:
		$ python manage.py sqlmigrate <app> <migration number>		
		sample: $ python manage.py sqlmigrate blog 0001 ✔️
SHELL:
	->to run python code & interact with django object:
		$ python manage.py shell
			* to check all users/posts:
		>>>from blog.models import Post
		>>>from django.contrib.auth.models import User  
		>>>User.objects.all() # will return all Users if any
		>>>Post.objects.all() # will return all Posts if any
		>>>Post.objects.first() # will return the first post
		>>>User.objects.filter(username='admin') # will return users with 'admin' username
		>>>User.objects.filter(username='user1').first() # will return first username with 'user1'
		>>>user = User.objects.filter(username='user1').first()
		>>>user.id # this will return user with username 'user1' it's 'id'
			* we create new Post
		>>>post_1 = Post(title='post title', content='some content', author=user)
		>>>post_1.save() # to save the effect
		>>>post_1.title # will return the title of the created post
		>>>Post.objects.all() 
		*will show you all the posts you created
		?if you want to show a name of the post when performing this command:
			in models.Post() add dunder __str__(self):	
			def __str__(self):
				return self.title
		>>>post_1.author.id # this will return the id of the user who created the post
			* to get all he posts the user created
		>>>user = User.objects.filter(username='somename').first()
		>>>user.post_set.all() # will show all the posts the user created
			* to create a post directly by the user
		>>>user.post_set.create(title='title 1', content='some content') # author not it is automatic

		
		











		
